// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/idahobean/npm-resource/npm"
)

type FakeNPM struct {
	ViewStub        func(packageName string, registry string) (*npm.PackageInfo, error)
	viewMutex       sync.RWMutex
	viewArgsForCall []struct {
		packageName string
		registry    string
	}
	viewReturns struct {
		result1 *npm.PackageInfo
		result2 error
	}
	viewReturnsOnCall map[int]struct {
		result1 *npm.PackageInfo
		result2 error
	}
	InstallStub        func(packageName string, registry string) error
	installMutex       sync.RWMutex
	installArgsForCall []struct {
		packageName string
		registry    string
	}
	installReturns struct {
		result1 error
	}
	installReturnsOnCall map[int]struct {
		result1 error
	}
	VersionStub        func(version string) error
	versionMutex       sync.RWMutex
	versionArgsForCall []struct {
		version string
	}
	versionReturns struct {
		result1 error
	}
	versionReturnsOnCall map[int]struct {
		result1 error
	}
	PublishStub        func(path string, tag string, registry string) error
	publishMutex       sync.RWMutex
	publishArgsForCall []struct {
		path     string
		tag      string
		registry string
	}
	publishReturns struct {
		result1 error
	}
	publishReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeNPM) View(packageName string, registry string) (*npm.PackageInfo, error) {
	fake.viewMutex.Lock()
	ret, specificReturn := fake.viewReturnsOnCall[len(fake.viewArgsForCall)]
	fake.viewArgsForCall = append(fake.viewArgsForCall, struct {
		packageName string
		registry    string
	}{packageName, registry})
	fake.recordInvocation("View", []interface{}{packageName, registry})
	fake.viewMutex.Unlock()
	if fake.ViewStub != nil {
		return fake.ViewStub(packageName, registry)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.viewReturns.result1, fake.viewReturns.result2
}

func (fake *FakeNPM) ViewCallCount() int {
	fake.viewMutex.RLock()
	defer fake.viewMutex.RUnlock()
	return len(fake.viewArgsForCall)
}

func (fake *FakeNPM) ViewArgsForCall(i int) (string, string) {
	fake.viewMutex.RLock()
	defer fake.viewMutex.RUnlock()
	return fake.viewArgsForCall[i].packageName, fake.viewArgsForCall[i].registry
}

func (fake *FakeNPM) ViewReturns(result1 *npm.PackageInfo, result2 error) {
	fake.ViewStub = nil
	fake.viewReturns = struct {
		result1 *npm.PackageInfo
		result2 error
	}{result1, result2}
}

func (fake *FakeNPM) ViewReturnsOnCall(i int, result1 *npm.PackageInfo, result2 error) {
	fake.ViewStub = nil
	if fake.viewReturnsOnCall == nil {
		fake.viewReturnsOnCall = make(map[int]struct {
			result1 *npm.PackageInfo
			result2 error
		})
	}
	fake.viewReturnsOnCall[i] = struct {
		result1 *npm.PackageInfo
		result2 error
	}{result1, result2}
}

func (fake *FakeNPM) Install(packageName string, registry string) error {
	fake.installMutex.Lock()
	ret, specificReturn := fake.installReturnsOnCall[len(fake.installArgsForCall)]
	fake.installArgsForCall = append(fake.installArgsForCall, struct {
		packageName string
		registry    string
	}{packageName, registry})
	fake.recordInvocation("Install", []interface{}{packageName, registry})
	fake.installMutex.Unlock()
	if fake.InstallStub != nil {
		return fake.InstallStub(packageName, registry)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.installReturns.result1
}

func (fake *FakeNPM) InstallCallCount() int {
	fake.installMutex.RLock()
	defer fake.installMutex.RUnlock()
	return len(fake.installArgsForCall)
}

func (fake *FakeNPM) InstallArgsForCall(i int) (string, string) {
	fake.installMutex.RLock()
	defer fake.installMutex.RUnlock()
	return fake.installArgsForCall[i].packageName, fake.installArgsForCall[i].registry
}

func (fake *FakeNPM) InstallReturns(result1 error) {
	fake.InstallStub = nil
	fake.installReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeNPM) InstallReturnsOnCall(i int, result1 error) {
	fake.InstallStub = nil
	if fake.installReturnsOnCall == nil {
		fake.installReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.installReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeNPM) Version(version string) error {
	fake.versionMutex.Lock()
	ret, specificReturn := fake.versionReturnsOnCall[len(fake.versionArgsForCall)]
	fake.versionArgsForCall = append(fake.versionArgsForCall, struct {
		version string
	}{version})
	fake.recordInvocation("Version", []interface{}{version})
	fake.versionMutex.Unlock()
	if fake.VersionStub != nil {
		return fake.VersionStub(version)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.versionReturns.result1
}

func (fake *FakeNPM) VersionCallCount() int {
	fake.versionMutex.RLock()
	defer fake.versionMutex.RUnlock()
	return len(fake.versionArgsForCall)
}

func (fake *FakeNPM) VersionArgsForCall(i int) string {
	fake.versionMutex.RLock()
	defer fake.versionMutex.RUnlock()
	return fake.versionArgsForCall[i].version
}

func (fake *FakeNPM) VersionReturns(result1 error) {
	fake.VersionStub = nil
	fake.versionReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeNPM) VersionReturnsOnCall(i int, result1 error) {
	fake.VersionStub = nil
	if fake.versionReturnsOnCall == nil {
		fake.versionReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.versionReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeNPM) Publish(path string, tag string, registry string) error {
	fake.publishMutex.Lock()
	ret, specificReturn := fake.publishReturnsOnCall[len(fake.publishArgsForCall)]
	fake.publishArgsForCall = append(fake.publishArgsForCall, struct {
		path     string
		tag      string
		registry string
	}{path, tag, registry})
	fake.recordInvocation("Publish", []interface{}{path, tag, registry})
	fake.publishMutex.Unlock()
	if fake.PublishStub != nil {
		return fake.PublishStub(path, tag, registry)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.publishReturns.result1
}

func (fake *FakeNPM) PublishCallCount() int {
	fake.publishMutex.RLock()
	defer fake.publishMutex.RUnlock()
	return len(fake.publishArgsForCall)
}

func (fake *FakeNPM) PublishArgsForCall(i int) (string, string, string) {
	fake.publishMutex.RLock()
	defer fake.publishMutex.RUnlock()
	return fake.publishArgsForCall[i].path, fake.publishArgsForCall[i].tag, fake.publishArgsForCall[i].registry
}

func (fake *FakeNPM) PublishReturns(result1 error) {
	fake.PublishStub = nil
	fake.publishReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeNPM) PublishReturnsOnCall(i int, result1 error) {
	fake.PublishStub = nil
	if fake.publishReturnsOnCall == nil {
		fake.publishReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.publishReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeNPM) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.viewMutex.RLock()
	defer fake.viewMutex.RUnlock()
	fake.installMutex.RLock()
	defer fake.installMutex.RUnlock()
	fake.versionMutex.RLock()
	defer fake.versionMutex.RUnlock()
	fake.publishMutex.RLock()
	defer fake.publishMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeNPM) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ npm.PackageManager = new(FakeNPM)
